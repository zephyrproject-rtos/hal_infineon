/***************************************************************************//**
* \file mtb_hal_trng_impl.h
*
* \brief
* Provides an implementation of the ModusToolboxâ„¢ TRNG HAL API.
*
********************************************************************************
* \copyright
* Copyright 2018-2022 Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

#pragma once

#if (MTB_HAL_DRIVER_AVAILABLE_TRNG)

#include "mtb_hal_trng.h"

#if defined(CY_IP_MXCRYPTO)
#include "mtb_hal_trng_mxcrypto.h"
#elif defined(CY_IP_M0S8CRYPTO) || defined(CY_IP_M0S8CRYPTOLITE)
#include "mtb_hal_trng_m0s8crypto.h"
#elif defined(CY_IP_MXCRYPTOLITE)
#include "mtb_hal_trng_mxcryptolite.h"
#else
#error Unknown TRNG hardware
#endif

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/**
 * \addtogroup group_hal_impl_trng TRNG (True Random Number Generator)
 * \ingroup group_hal_impl
 * \{
 * Initialization polynomial values for the True Random Number Generator.
 */

/**
 * Sets up a HAL instance to use the specified hardware resource. This hardware
 * resource must have already been configured via the PDL.
 *
 * @param[out] obj   The HAL driver instance object. The caller must allocate the
 *                   memory for this object, but the HAL will initialize its contents
 * @param[in] config Configuration struct generated by the device configurator
 * @return the status of the HAL setup
 */
__STATIC_INLINE cy_rslt_t mtb_hal_trng_setup(mtb_hal_trng_t* obj,
                                             const mtb_hal_trng_configurator_t* config)
{
    CY_UNUSED_PARAMETER(config);
    CY_ASSERT(NULL != obj);
    return _mtb_hal_trng_setup(obj);
}


/** \} // group_hal_impl_trng */

#if defined(__cplusplus)
}
#endif /* __cplusplus */

#endif /* MTB_HAL_DRIVER_AVAILABLE_TRNG */
